# info：设置日志输出等级为info级别；
log4j.rootLogger=info, stdout, R

# stdout：日志输出在控制台；
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# %c 输出日志信息所属的类的全名
# %d 输出日志时间点的日期或时间，默认格式为ISO8601（也可以在其后指定格式）
# %f 输出日志信息所属的类的类名
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
# %m 输出代码中指定的信息，如log(message)中的message
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数
# %t 输出产生该日志事件的线程名
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [%c.%M]%n%-5p: %m%n

# R：日志以滚动的方式输出到文件；
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
# 日志文件存放位置
log4j.appender.R.File=logs/catalina
# 文件最大100k
#log4j.appender.R.MaxFileSize=100KB
# 最多滚动5个文件
#log4j.appender.R.MaxBackupIndex=5
log4j.appender.R.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss a} [%c.%M]%n%-5p: %m%n
